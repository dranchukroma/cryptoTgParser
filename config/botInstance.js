// config/botInstance.js
import { TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions/index.js';
import { Api } from 'telegram/tl/index.js';
import fs from 'fs';

const apiId = Number(process.env.API_ID);
const apiHash = process.env.API_HASH;
const sessionString = process.env.SESSION_STRING;

// ‚îÄ‚îÄ –ë–∞–∑–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –±–µ–∑ —Å–ª—É—Ö–∞—á—ñ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const client = new TelegramClient(
  new StringSession(sessionString),
  apiId,
  apiHash,
  { connectionRetries: 5 }
);

// ‚îÄ‚îÄ –•–µ–ª–ø–µ—Ä–∏ –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó/–ø–∞—Ä—Å–∏–Ω–≥—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
function extractMediaInfo(message) {
  const info = {
    hasMedia: !!message.media,
    mediaType: null,            // 'photo' | 'document' | 'webpage' | 'other' | null
    fileName: null,
    mimeType: null,
    size: null,
    isAlbum: !!message.groupedId,
  };

  if (!message.media) return info;

  const media = message.media;
  const className = media?.className || media?._ || null;

  if (className === 'MessageMediaPhoto' || message.photo) {
    info.mediaType = 'photo';
  } else if (className === 'MessageMediaDocument' || message.document) {
    info.mediaType = 'document';
    const doc = message.document || media.document;
    const attributes = doc?.attributes || [];
    const nameAttr = attributes.find(a => a.fileName || a.className === 'DocumentAttributeFilename');
    info.fileName = nameAttr?.fileName || null;
    info.mimeType = doc?.mimeType || null;
    info.size = Number(doc?.size ?? null) || null;
  } else if (className === 'MessageMediaWebPage') {
    info.mediaType = 'webpage';
  } else {
    info.mediaType = 'other';
  }

  return info;
}

function normalizeMessage(message) {
  const media = extractMediaInfo(message);
  return {
    id: message.id,
    date: message.date?.toISOString?.() || String(message.date),
    text: message.message || null,
    hasMedia: media.hasMedia,
    mediaType: media.mediaType,
    fileName: media.fileName,
    mimeType: media.mimeType,
    size: media.size,
    albumId: message.groupedId ? String(message.groupedId) : null,
    replyToMsgId: message.replyTo?.replyToMsgId ?? null,
    fwdFrom: message.fwdFrom ? {
      fromName: message.fwdFrom?.fromName || null,
      fromId: message.fwdFrom?.fromId || null,
    } : null,
    views: typeof message.views === 'number' ? message.views : null,
    forwards: typeof message.forwards === 'number' ? message.forwards : null,
    entities: (message.entities || []).map(e => e.className || e._).slice(0, 20),
  };
}

async function resolvePeer(raw) {
  if (!raw) throw new Error('CHANNEL_ID is empty');
  if (String(raw).startsWith('@')) return raw;
  try {
    // -100‚Ä¶ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è —è–∫ BigInt
    return BigInt(raw);
  } catch {
    return raw;
  }
}

/**
 * –í–∏—Ç—è–≥—É—î –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É/—á–∞—Ç—É.
 * @param {object} opts
 * @param {string|bigint} opts.channel - '@username' –∞–±–æ '-100‚Ä¶'
 * @param {number} [opts.limit] - —Å–∫—ñ–ª—å–∫–∏ —Ç—è–≥–Ω—É—Ç–∏ (–¥–µ—Ñ–æ–ª—Ç –∑ ENV HISTORY_LIMIT –∞–±–æ 5000)
 * @param {boolean} [opts.includeService=false] - —á–∏ –≤–∫–ª—é—á–∞—Ç–∏ —Å–ª—É–∂–±–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 * @param {string|null} [opts.saveToPath=null] - —à–ª—è—Ö –¥–æ JSON –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (–æ–ø—Ü—ñ–π–Ω–æ)
 * @returns {Promise<Array<object>>} –º–∞—Å–∏–≤ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
 */
async function fetchRecentMessages({
  channel,
  limit = Number(process.env.HISTORY_LIMIT || 5000),
  includeService = false,
  saveToPath = null,
} = {}) {
  if (!client.connected) {
    // –Ø–∫—â–æ –≤–∏ —â–µ –Ω–µ —Ä–æ–±–∏–ª–∏ client.start() —É –≥–æ–ª–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—ñ ‚Äî –¥–æ–∑–≤–æ–ª–∏–º–æ –∑—Ä–æ–±–∏—Ç–∏ —Ç—É—Ç.
    await client.start();
  }

  const peer = await resolvePeer(channel);
  const entity = await client.getEntity(peer);

  const out = [];
  let count = 0;

  // iterMessages –π–¥–µ –≤—ñ–¥ –Ω–æ–≤–∏—Ö –¥–æ —Å—Ç–∞—Ä–∏—Ö; limit ‚Äî –º–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å—ñ–≤
  for await (const msg of client.iterMessages(entity, { limit })) {
    if (!msg) continue;

    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Å–ª—É–∂–±–æ–≤–∏—Ö (join/left/–ø—ñ–Ω —Ç–æ—â–æ), —è–∫—â–æ includeService === false
    const isService = msg instanceof Api.MessageService;
    if (isService && !includeService) continue;

    out.push(normalizeMessage(msg));
    count++;
    // –õ–µ–≥–∫–µ —Ç—Ä–æ—Ç–ª—ñ–Ω–≥-–ª–æ–≥—É–≤–∞–Ω–Ω—è –±–µ–∑ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —à—É–º—É
    if (count % 1000 === 0) {
      // eslint-disable-next-line no-console
      console.log(`  ‚Ä¶–≤–∏—Ç—è–≥–Ω—É—Ç–æ ${count}`);
    }
  }

  if (saveToPath) {
    fs.writeFileSync(saveToPath, JSON.stringify(out, null, 2), 'utf8');
    // eslint-disable-next-line no-console
    console.log(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ ${out.length} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É ${saveToPath}`);
  }

  return out;
}

// –ï–∫—Å–ø–æ—Ä—Ç–∏
export default client;
export { fetchRecentMessages };
